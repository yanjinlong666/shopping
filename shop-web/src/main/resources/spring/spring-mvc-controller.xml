<?xml version="1.0" encoding="GBK"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  


        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  




        http://www.springframework.org/schema/mvc   
    	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!-- 注解驱动 -->
	<mvc:annotation-driven></mvc:annotation-driven>
	
    <!-- 对项目中的所有类进行扫描以完成Bean创建并进行自动注入。  
           支持 @Controller、@Service 以及 @Repository 和 @Component -->
	<!-- 扫描项目中com.fh.shop.controller包下所有的类，从而使类中的@Controller注解生效 -->
    <context:component-scan base-package="com.fh.shop.backend.controller"/>

	<!--
        jsp视图解析器，对模型视图名称的解析，即在模型视图名称添加前后缀
        如/view/welcome.jsp对应的视图名就是：welcome
        这个类在视图解析器链中一定要定义在其他视图的后面，因为它始终会返回一个视图
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    <!-- 处理请求response返回值，如下配置能正确返回字符串型返回值,如返回值为对象，则自动转为json -->
    
	<!--配置拦截器, 多个拦截器,顺序执行 -->
    <mvc:interceptors> 
           <mvc:interceptor>
                   <!--  
                       /**的意思是所有文件夹及里面的子文件夹 
                       /*是所有文件夹，不含子文件夹 
                       /是web项目的根目录
                     --> 
                   <mvc:mapping path="/**" /> 
                   <!-- 需排除拦截的地址 -->  
                   <!-- <mvc:exclude-mapping path="/user/login.jhtml"/> -->
                   <bean class="com.fh.shop.backend.interceptor.MyInterceptor"></bean> <!--这个类就是我们自定义的Interceptor -->
          </mvc:interceptor> 
          <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法  -->
    </mvc:interceptors>
    
    <!-- AOP进行日志统一管理 -->
	<bean id="infoAspect" class="com.fh.shop.backend.aspect.InfoAspect"></bean>
   <!-- <aop:config>
    	<aop:aspect ref="infoAspect">
    		<aop:pointcut expression="execution(* com.fh.shop.backend.controller..*.*(..))" id="pointcut"/>
    		<aop:around method="log" pointcut-ref="pointcut"/>
    	</aop:aspect>
    </aop:config>-->
    
    <bean id="logAspect" class="com.fh.shop.backend.aspect.LogAspect"></bean>
    <aop:config>
    	<aop:aspect ref="logAspect">
    		<aop:pointcut expression="execution(* com.fh.shop.backend.controller..*.add*(..))||execution(* com.fh.shop.backend.controller..*.delete*(..))||execution(* com.fh.shop.backend.controller..*.update*(..))||execution(* com.fh.shop.backend.controller..*.login(..))" id="logPointCut"/>
    		<aop:around method="doLog" pointcut-ref="logPointCut"/>
    	</aop:aspect>
    </aop:config>

    <!-- 配置文件解析 -->
    <!-- 注意：这里id必须填写：multipartResolver -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 最大上传文件大小 单位：字节，大约10mb-->
        <property name="maxUploadSize" value="10000000" />
        <!--设置编码-->
        <property name="defaultEncoding" value="UTF-8"></property>
    </bean>
</beans>